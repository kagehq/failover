name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: |
          cargo test --verbose
          cargo clippy -- -D warnings
          cargo fmt -- --check

      - name: Build for Linux x86_64
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Build for Linux ARM64
        run: |
          rustup target add aarch64-unknown-linux-gnu
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar
          export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          cargo build --release --target aarch64-unknown-linux-gnu

      - name: Build for Windows x86_64
        run: |
          rustup target add x86_64-pc-windows-gnu
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64
          export CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc
          export AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar
          export CXX_x86_64_pc_windows_gnu=x86_64-w64-mingw32-g++
          export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc
          cargo build --release --target x86_64-pc-windows-gnu

      - name: Upload Linux x86_64
        uses: actions/upload-artifact@v4
        with:
          name: failover-linux-x86_64
          path: target/x86_64-unknown-linux-gnu/release/failover

      - name: Upload Linux ARM64
        uses: actions/upload-artifact@v4
        with:
          name: failover-linux-aarch64
          path: target/aarch64-unknown-linux-gnu/release/failover

      - name: Upload Windows x86_64
        uses: actions/upload-artifact@v4
        with:
          name: failover-windows-x86_64.exe
          path: target/x86_64-pc-windows-gnu/release/failover.exe

  macos:
    runs-on: macos-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build for macOS x86_64
        run: |
          rustup target add x86_64-apple-darwin
          cargo build --release --target x86_64-apple-darwin

      - name: Build for macOS ARM64
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

      - name: Upload macOS x86_64
        uses: actions/upload-artifact@v4
        with:
          name: failover-macos-x86_64
          path: target/x86_64-apple-darwin/release/failover

      - name: Upload macOS ARM64
        uses: actions/upload-artifact@v4
        with:
          name: failover-macos-aarch64
          path: target/aarch64-apple-darwin/release/failover

  release:
    runs-on: ubuntu-latest
    needs: [linux, macos]
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Linux x86_64
        uses: actions/download-artifact@v4
        with:
          name: failover-linux-x86_64
          path: release/

      - name: Download Linux ARM64
        uses: actions/download-artifact@v4
        with:
          name: failover-linux-aarch64
          path: release/

      - name: Download Windows x86_64
        uses: actions/download-artifact@v4
        with:
          name: failover-windows-x86_64.exe
          path: release/

      - name: Download macOS x86_64
        uses: actions/download-artifact@v4
        with:
          name: failover-macos-x86_64
          path: release/

      - name: Download macOS ARM64
        uses: actions/download-artifact@v4
        with:
          name: failover-macos-aarch64
          path: release/

      - name: Create release archive
        run: |
          # Debug: List what we have
          echo "Contents of release directory:"
          find release -type f -exec ls -la {} \;
          
          # Find and move binaries to correct locations
          find release -name "failover" -type f -exec mv {} release/failover-linux-x86_64 \; 2>/dev/null || true
          find release -name "failover" -type f -exec mv {} release/failover-linux-aarch64 \; 2>/dev/null || true
          find release -name "failover" -type f -exec mv {} release/failover-macos-x86_64 \; 2>/dev/null || true
          find release -name "failover" -type f -exec mv {} release/failover-macos-aarch64 \; 2>/dev/null || true
          find release -name "failover.exe" -type f -exec mv {} release/failover-windows-x86_64.exe \; 2>/dev/null || true
          
          # Alternative approach: copy from subdirectories if they exist
          if [ -f "release/failover-linux-x86_64/failover" ]; then
            cp release/failover-linux-x86_64/failover release/failover-linux-x86_64
          fi
          if [ -f "release/failover-linux-aarch64/failover" ]; then
            cp release/failover-linux-aarch64/failover release/failover-linux-aarch64
          fi
          if [ -f "release/failover-macos-x86_64/failover" ]; then
            cp release/failover-macos-x86_64/failover release/failover-macos-x86_64
          fi
          if [ -f "release/failover-macos-aarch64/failover" ]; then
            cp release/failover-macos-aarch64/failover release/failover-macos-aarch64
          fi
          if [ -f "release/failover-windows-x86_64.exe/failover.exe" ]; then
            cp release/failover-windows-x86_64.exe/failover.exe release/failover-windows-x86_64.exe
          fi
          
          # Make executables
          chmod +x release/failover-linux-x86_64 2>/dev/null || true
          chmod +x release/failover-linux-aarch64 2>/dev/null || true
          chmod +x release/failover-macos-x86_64 2>/dev/null || true
          chmod +x release/failover-macos-aarch64 2>/dev/null || true

      - name: Create checksums
        run: |
          cd release
          sha256sum failover-* > checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/failover-linux-x86_64
            release/failover-linux-aarch64
            release/failover-macos-x86_64
            release/failover-macos-aarch64
            release/failover-windows-x86_64.exe
            release/checksums.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
